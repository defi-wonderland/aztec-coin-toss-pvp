/* Autogenerated file, do not edit! */
  
use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::protocol_types::constants::RETURN_VALUES_LENGTH;



// Interface for calling Timestamp functions from a private context
struct TimestampPrivateContextInterface {
  address: Field,
}

impl TimestampPrivateContextInterface {
  pub fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  pub fn validate_timestamp(
    self,
    context: &mut PrivateContext,
    provided_timestamp: u120,
    jitter: u120
  ) {
    let mut serialized_args = [0; 2];
    serialized_args[0] = provided_timestamp as Field;
    serialized_args[1] = jitter as Field;

    context.call_public_function(self.address, 0xdf00ddbf, serialized_args)
  }
  
}
  
  


// Interface for calling Timestamp functions from a public context
struct TimestampPublicContextInterface {
  address: Field,
}

impl TimestampPublicContextInterface {
  pub fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  pub fn validate_timestamp(
    self,
    context: PublicContext,
    provided_timestamp: u120,
    jitter: u120
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 2];
    serialized_args[0] = provided_timestamp as Field;
    serialized_args[1] = jitter as Field;

    context.call_public_function(self.address, 0xdf00ddbf, serialized_args)
  }
  
}
  
  
