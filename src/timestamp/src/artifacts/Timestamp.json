{
  "name": "Timestamp",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "validate_timestamp",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "provided_timestamp",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "jitter",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJzN3d2KI9cVhuF76eMhqGr97rmVkAOTOGAwToh9Znzv6ZBqzYQpptbbLa2sIzdmS3ywVZ80j/Yq/f7y8z/++sNvP/3jl19fPv/+cvuTr5fPf/795dd//vDLf/7Hr7/98K/fXj7fPr38+MvfXv/7x6eXv//0848vn7c//vLpdXnc2PKNLd/ZcmHLlS03ttzZ8qgu//TNqk23PY6Vr3+b3Vev/Xj2fOqzl18z73n2LL/E3vXs5Vfku569/AJ+17OXX+/vevby5fGuZy9fTe969vLF965nf+q1mk+9VvOp1+p66rW6nnqtrqdeq+up1+p66rW6nnqtrqdeq+up1+p66rW6nnqtbrenXqzb7UNXq7jfn14yv376s+W+3e7LfdtO0nzo6n54mg+1wcPTfKg9Hp7mQ23z8DQfaqeHp/lQmz08zYfa7+FpPtSWj06zfahcH55mVBdvo7p4G9XF26gu3kZ18Taqi7dRXbyN6uJtVBfvo7p4H9XF+6gu3kd18T6qi/dRXbyP6uJ9VBfvo7p4H9XFMqqLZVQXy6gullFdLKO6WEZ1sYzqYhnVxTKqi2VUF+uoLtZRXayjulhHdbGO6mId1cU6qot1VBfrqC7WUV1so7rYRnWxjepiG9XFNqqLbVQX26gutlFdbKO62EZ1sY/qYh/VxT6qi31UF/uoLvZRXeyjuthHdbGP6uL6BEBHmvqAQUuaUV1cH49oSTOqi+vDHS1pRnVxfTSlJc2oLv7YpMyj03xsfoSmsS8nej3yJE3rFX6ZpvFVbPJlp17/PtupxldxIU3jq7iQpvETxXWaj82oPDxN3yeKlKXH6tc//b447C1LX9tcZ2nsGhO1+y7pzT6w/Ajf+OHj8eEbP6uw8Cvubwm3/au199dM6zvCQ5O3vns8MPleHyI61rMJ8L0+t3OsZzPg+618qR7r2RT4Xp8fOdaXXwnH+vI7/bGezffv9TmGYz3c3/oswLEe7m/9PP2xHu5v/Uz6sR7ub/1c97Ee7m/9bPSxHu5v/XzxsR7ub/2M7rEe7m/9nOuxHu5v/azosR7ub/285bEe7m/9zOKxHu5v/dzfsR7ub/3s3LEe7m/9/NmxHu5v/QzXsR7ub/0c1LEe7m/9LNGxHu5v/TzOsR7ub/1My7Ee7m/9XMixHu5v/WzFsR7ub/18wrEe7m/9O/5jPdzf+vfkx3q4v/Xvmo/1cH/r39ce6+H+1r/zPNbD/a1/b3ish/tb/+7tWA/3F94ga4d3yNrhLbJ2eI+sHd4ka4d3ydrhbbL2+rcFx3q4v/V7Wf13ff3uVMd6uL/1bwCO9XB/63d5OtbD/a0r/bEe7m9duo/1cH/rWnysh/tbN9djPdzfOkUe6+H+1s3tWA/3t36HnWM921+BfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/EuhXAv1KoF8J9CuBfiXQrwT6lUC/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuFfqXQrxT6lUK/UuhXCv1KoV8p9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/MuhXBv3KoF8Z9CuDfmXQrwz6lUG/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859CuHfuXQrxz6lUO/cuhXDv3KoV859KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/CuhXAf0qoF8F9KuAfhXQrwL6VUC/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KuEfpXQrxL6VUK/SuhXCf0qoV8l9KsF/WpBv1rQrxb0qwX9akG/WtCvFvSrBf1qQb9a0K8W9KsF/WpBv1rQrxb0qwX9akG/WtCvFvSrBf1qQb9a0K8W9KsF/WpBv1rQrxb0qwX9akG/WtCvFvSrBf1qQb9a0K8W9KsF/WpBv1rQrxb0qwX9akG/WtCvFvSrBf1qnfvVvvvxiN3k28ec7vHFY073eY+3ZHLbvn3M6V5fPOZ0v7//mHPTunjM6b5fPOZ07y8ec7r/F485fQ2Ib2+PifXtY05fBxePOX0dXDzm9HVw8ZjT18HFY05fByLrO485t6+Lx5y+Di4ec/o6uHjM6evg4jHnr4PvPWYDN7D69M2qTcXfSuD178z76rWfLo9N78tjs6+Xv8Up93dLnDqf9cQpv/v0xCm/ufXEKb93PiKOyZc4X11YX8UpvzX3xCl/suuJU/7g2BOn/Lm0J05rK1/HaW3l9WV5ytmFXkfvnjidvZPxVZyIszidvVOI09k7hTidvVOI09k7hTidvVOI09k713HqX8b0xOn8NFiI0/lpsBBnVivXvwjriTOrletf4/XEmdXK9S8he+KMamVwC9aeOKNaGdxAtifOqFYGt7/tiTOqlcHNe3vijGplcOvhnjizWrl+8KEnzqxWrh/b6Ikzq5Xrh0564sxq5fqRmZ44s1q5fuCnJ86sVq4fV+qJM6uV64eteuLMauX6UbGeOLNauX7QrSfOrFauH9PriTOrleuHDHvizGrl+hHJnjizWrl+wLMnzqxWrh9P7Ykzq5Xrh2t74sxq5frR4J44s1q5frC5J86sVq4fy+6JM6uV6zdF6Ikzq5Xrt3ToiTOrles3pOiJM6uV67fT6Ikzq5XrNwPpiTOrleu3MumJM6uV6zdi6Ykzq5Xrt5HpiTOrles3wemJM6uV67fw6Ykzq5XrNyDqiTOrlVun1wpxZrVy6/RaIc6sVm6dXivEmdXKrdNrhTizWrl1eq0QZ1Yrt06vFeLMauXW6bVCnFmtXL/hXE+cWa08a7YP/BpqT5xZrTxrtg/8VGxPnFmtPGu2D/yObk+cWa08a7YP/MhwT5xZrTxrtg/8AnNPnFmtPGu2D/w8dU+cUa0Mfly7J86oVgY/Dd4TZ1Qrgx8274kzqpXBz7L3xJnVyrNm+8Bv1vfEmdXKs2b7YtZsX8ya7YtZs30xa7YvZs32xazZvpg12xezZvti1mxfzJrti1mzfdE6LrZkvy9fpmdxOi/06zidA1G2bW+3D379e7+dxWl8KVfiNL6UK3EaP2BU4jR+wKjE6fuAkbLebiD8+qffF4fdw/S1TiFMY+fYvm33jdr9YvmKeFt827+6H+o9eufg1KOjN35oeXT0zneFB0fvfAd5cPTOd5vvRH+L01nvhTiN/36sxGn8WFmJM6Tijzidk1WVOEOq+C1OZ73KdrvHkW07i9NZmYU4nTVYiNP5obsQp7OVC3E6W7kQp7OVC3E6W/k6TudkVSVOZysX4sxq5c7JqkqcWa3cOVlViTOrlTsnqypxZrVy52RVIU7nZFUlzqxW7pysqsSZ1cqdk1WVOLNauXOyqhJnVit3TlZV4sxq5c7JqkqcWa3cOVlViTOrlVtnh9b925/NbqdfjLXODhXitH4hfx2n9Qv5yzits0OFOJ0nbwpxOk/e/G+cs9MTrbNDhTiNnwYrcTrPQxbi/P9a+TRO56fBm345PXHLs/esztmh6zjZOR1TidP5eacQp/PzTiFO579CC3E6/xVaiNN6TGr/0jubnryFZud0TCVOZ+8U4nT+K/Q6Tud0TCVOZysX4rQeXr2O03p49TpOZysX4rQeXr2OM6uVO6djKnFmtXLndEwhTud0TCXOrFbunI6pxJnVyp3TMZU4s1q585evKnFaW/lqwiE7R5kqcVpb+TJO5y9fVeK0tvJ1nFGDXjlr0CtnDXrlrEGvnDXolZ2/fFWJM6uVW4e9ruO0DnAV4sxq5dZBq0KcWa3cOhBViDOrlVvnswpxZrVy63xWIc6sVm6dzyrEmdXKrfNZhTizWrl1PqsQZ1Yrt85nFeLMqsHWgajvxfnjj38DIRHgHA=="
    ],
    "fileMap": {
      "1": {
        "source": "contract Timestamp {\n\n    use dep::aztec::context::Context;\n\n    #[aztec(private)]\n    fn constructor() {\n    }\n\n    #[aztec(public)]\n    fn validate_timestamp(provided_timestamp: u120, jitter: u120) {\n        let timestamp = context.timestamp() as u120;\n        assert(provided_timestamp <= timestamp, \"Future timestamp\");\n        assert(provided_timestamp >= timestamp - jitter, \"Past timestamp\");\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; 0]) -> [Field; 4] {\n        [0,0,0,0]\n    }\n}",
        "path": "/home/ng/code/defi/pvp/src/timestamp/src/main.nr"
      },
      "75": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "92": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "95": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      }
    }
  }
}