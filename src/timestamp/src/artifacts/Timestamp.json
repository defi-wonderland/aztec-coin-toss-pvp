{
  "name": "Timestamp",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "validate_timestamp",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "provided_timestamp",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "jitter",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "contract Timestamp {\n\n    use dep::aztec::context::Context;\n\n    #[aztec(private)]\n    fn constructor() {\n    }\n\n    #[aztec(public)]\n    fn validate_timestamp(provided_timestamp: u120, jitter: u120) {\n        let timestamp = context.timestamp() as u120;\n\n        assert(provided_timestamp >= timestamp, \"Past timestamp\");\n        assert(provided_timestamp <= timestamp + jitter, \"Future timestamp\");\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; 0]) -> [Field; 4] {\n        [0,0,0,0]\n    }\n}",
        "path": "/home/shaito/wonderland/aztec-coin-toss-pvp/src/timestamp/src/main.nr"
      },
      "75": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "92": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "95": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      }
    }
  }
}