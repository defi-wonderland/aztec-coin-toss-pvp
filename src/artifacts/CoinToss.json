{
  "name": "CoinToss",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "divinity",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "private_oracle",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "bet_amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "phase_length",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "end_bet_phase",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "round_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_bet_amount_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx0QhYCEl/gzqmID/QN/KASFUck4P+CQEYdrKqXpsKXuE4y44ztGhEx8rWVDGaUfyh+oHhb1mamBeKrhenfGL5gJcrZlnVX3mLr8p62IxoG0rYSz5Hrw7hCXEl+64jYSmmRyMde1m5P+37kThjh4/uIORl00HdZI6/e0syzj0bM09I3uDYqhyVzgQ7AdSqXf/LGurxNxlgTL/oiku7gx7lEPvePVeeiLDNTQYYeqIXJ/Q+bmt0lezDrh//T43m7d9f+3HcXQ2k5laKl1NjnkUdJHcWmyhgpBhwurZan2vs1rlFrthcEivocEAcAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_config_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::config_note::ConfigNote",
          "fields": [
            {
              "name": "divinity",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "private_oracle",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "token",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "bet_amount",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_divinity_address_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::types::address::AztecAddress",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUuw7CMAx0Qh4EJH6BnakM7P0G/qASFSMS8P+CQE49rKpLU+ElrpPcOWe7RkSMfG0lgxnlH4ofKN6WtZlpgfhqYfo3hi9YiXK2Zd2Vt9i6vKftiIaBtK3Ec+T6MK4QV5LfOiK2Ulok8rGXtdvTvh+5E0b4+D5iTgYd9F3WyKu3NPPsoxHztPQNro3KYclcoANwncrln7yxLm+TMdbEi76IpDv4cS6Rz/1j1bkoy8xUkKEHamFy/8OmZnfJHsz64f/0eN7u3bU/993FUFpOpWgpNfZ55FFSR7GpMkaKAYdLq+Wp9n6Na9Sa7QUdXUc/EAcAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_oracle_address_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::types::address::AztecAddress",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx0QhYCEl/gzqlIPKBv4AeVqDgiAf8XBDLqYFW9NBW+xHWSGWds14iIka+tZDCj/EPxA8XbsjYzLRBfLUz/xvAFK1HOtqy78hZbl/e0HdEwkLaVeI5cH8YV4kryW0fEVkqLRD72snZ72vcjd8IIH99HzMmgg77LGnn1lmaefTRinpa+wbVROSyZC3QArlO5/JM31uVtMsaaeNEXkXQHP84l8rl/rDoXZZmZCjL0QC1M7n/Y1Owu2YNZP/yfHs/bvbv25767GErLqRQtpcY+jzxK6ig2VcZIMeBwabU81d6vcY1as70ARoe13RAHAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_phase_length_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx0QhYCEl/gzqnwgr6BH1Si4ogE/F8QyKiDVfXSVPgS10lmnLFdIyJGvraSwYzyD8UPFG/L2sy0QHy1MP0bwxesRDnbsu7KW2xd3tN2RMNA2lbiOXJ9GFeIK8lvHRFbKS0S+djL2u1p34/cCSN8fB8xJ4MO+i5r5NVbmnn20Yh5WvoG10blsGQu0AG4TuXyT95Yl7fJGGviRV9E0h38OJfI5/6x6lyUZWYqyNADtTC5/2FTs7tkD2b98H96PG/37tqf++5iKC2nUrSUGvs88iipo9hUGSPFgMOl1fJUe7/GNWrN9gJfUAj+EAcAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_round_data",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "round_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::round_data::RoundData",
          "fields": [
            {
              "name": "phase",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "current_phase_end",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "reveals_count",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            },
            {
              "name": "bettors",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 120
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82YTW/aQBCGbYxtPkICISEhocmqvUeG5tBDD/4N7alHJGgvpEjYVfvzm3V21Kcbt4qUcchIsONZe96PBdYmDoIgDB4iQs6QWu7G7HkxD/V6ZW3wbEGHDZmL718rl3dxnkSCPFfilej7lpF7C9p60OZ70Q3+Xl/fgzZqEXraOHTexLo6FsSS8D93OXLBT8BXics8Cf6sv1LPau1T3Z4fbI8OPIngiY0+5lPMdZT9CoPH3xc5Jr+ncm3tmWtT69/V7bk4cJz5HQ7+oaevrMf2kN+YNrD6wBw0sHYHrlfoXoLRA+5hA7iCEztc4SFYEc5558YB/PDXowlvGDlywSKXcM9cuAcFqA08r7gvcQ2+YH7ocu5vI5dHNb2HqB25fFRzLT0aelqy50XlEXFyHAtWDxxGr4BL54W4yJpI3yOPyz5xj3Vxq9/RMXDlM3oM3wV/DB4nyjxCj8cv4J4A91TZd9tjUqP/FPoFfwIeZ7o8Kv0TT7/gngH3XBd3YXtMa/SfQ7/gT8HjQpdHpX/q6RfcC+Be6uK+tz1mNfovoV/wZ+DxRpdHpX/m6RdcweoiH6N25fIJatcun6JmPB3c24ghe9YVavKMc42aPAMZN6bOm0jXm9sG7odvqUnif/cNCUblZ8+53dfk3qgot7vlt/Wn9XIVgpZQlZF/FzDn7UbqXWNrsoXGqMn1KWrSh49vj/6GyZX0U2hQIzRyxzHO4blv3fjRjZ8fPDTFZluazHy/f19uNtuf69WN4Vxh7n4UpSnK5a40X3fbOzO/+Q3R6I1pfBIAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_round_id",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx00iwEJL7AnVP5Qd/ADypRcUQC/i8IZNTBqnppKnyJ6yQzztiuEREjX2tkNKP8Y/EDxbuytgstEF8tTP/G8AUrUc62rPvyFluX97Sb0DCQtrV4uD6MK8SV5LeOiDVKi0Q+9rJ2B9r3E3fCBB/fR8zJqIO+yxp59ZZ2mX00Yp6OvsG1VTmsmQt0AK5TufyTN9blbTPGhnjRF5F0Bz/OJfK5f6w6F2WdmQoy9kAtTO5/2NzsrtmDWT/8nx7P272/DuehvxhKy6kULaXGPo88SuooNlfGSDHgcGm1PNXer3GNWrO9APM4bgIQBwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_token_address_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::types::address::AztecAddress",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUuw7CMAx0Qh4EJH6BnakszP0G/qASFSMS8P+CQE49rKpLU+ElrpPcOWe7RkSMfG0lgxnlH4ofKN6WtZlpgfhqYfo3hi9YiXK2Zd2Vt9i6vKftiIaBtK3Ec+T6MK4QV5LfOiK2Ulok8rGXtdvTvh+5E0b4+D5iTgYd9F3WyKu3NPPsoxHztPQNro3KYclcoANwncrln7yxLm+TMdbEi76IpDv4cS6Rz/1j1bkoy8xUkKEHamFy/8OmZnfJHsz64f/0eN7u3bU/993FUFpOpWgpNfZ55FFSR7GpMkaKAYdLq+Wp9n6Na9Sa7QWxNSHDEAcAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_user_bets_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::bet_note::BetNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "bet_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "bet",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "escrow_randomness",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "initialize",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "phase_length",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "bet_amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "oracle_address",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "divinity_address",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token_address",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "roll",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "round_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "oracle_nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "start_next_round",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+3dBXzcRvYHcMsLtqw1xHYhaZq4KVPqOCmT25SZmdImadMG2sRpU2Zm5vaY+a53xSszMzdlZkghvdz/jTwv/UWR96JPZ+K3fz99Ps87Gq1mvjMjydJq4dqqqqqgqnvKUTRXzT3x8k772P7jpmGBu7LafTqrK8SZqxBnvkKchQpxFivEWVMhztoKcYYV4qyrEGdUIc5ShTjrK8TZUCHOxgpxNlWIs1+FOJsdOvuDs8U+ttrHBezjgvZxIfu4sH3kdQfYNubt/CIUAykWpRhkl3GHDKZoo1iMYgjF4hRLUCxJsRTF0hTLUCxLsRzF8hQrUKxIMZRiJVvWMIoOiuEUIyhWpliFYlWK1ShWp1iDYk2KtSjWpliHYl3bd+tRrE8xkmIDig0pNqLYmGITik0pNqPYnGILii0ptrJtabNt2ZpiG4ptKbaj2J5iB4odKXai2JliF4pdKXaj2J1iD4o9Kfai2JtiH4pRFPtS7EcxmmIMxViK/SkOoBhHcSDFQRTjKSZQTEz0+SSKgykOoZhslzXZZVMouiimUhxKcRjFNIrDKY6gOJLiKIqjKY6hOJbiOIrjKU5IlHUixUkUJ1OcQnEqxWkUp1OcQXEmxVkUZ1OcQ3EuxXkU51NcYMuqtmVdSHFRIu9iikts+lL7eJl9vNw+XmEfr7SPV9nHq+3jNfbxWtNnpe60OTdKXsOaPN7mA8jj7b8a8nhfyEEe7xd5yON9pAB5vL8UIY/3nRrIG2DTtZC3CKT5caBN10HeojYdQd4gmy5B3mCbroe8NptugLzFbLoR8obYdBPkLW7T/armbKOZOu1j+4+cTJmOj6Htxs7j2wzt4fFtgTwe31bI4/FdAPK47QtCHo/vQpDH47sw5PH49oc8Ht8BkMfji9sFj+9AyOPxXRTyeHwHQR6P72DI4/Ftgzwe38Ugj/ttCORxv/F2YfppPVjOE+5b+DoT5/Fy3LdyUCbn8XLct3g57lu8HPctXM6PvBz3LV6O+xEvx32Gxwb3D14HtzEeG9yeuBzcdnhscDvhsnGb4LHBbYLrw22Cxwa3CTbgNsHbNG4T7GqDPN6mcZtgK28Tpl1FWL/TPrb/uGkYOnkKEvOdkOb6i+B2ZGmPwLIQ1NPfbT3DsX/npc39wbKI4zbj/6t5sSwCloFuLfHrXYu6LTMeU+5r3Ne4HvyfPshxewKoh8vlea4rgjzc7wel+Aa79XUEUA+Xy/ODwcd5eAzi4w3vJ+b4vStYpRwncJ+uBt/CHnwLZfAtDD5eLwe+AR58/TP4BoCP18P/0a73fTxHnhffQPDxegXwud6X8ZgxL760/bsIj20efIMz+NrAx+vVgG+IB99iGXxDwMfr1YJvCQ++xTP4lgAfrxeCbykPviUz+JYCH69XB75lPPiWzuBbBnxLQ5p9y3nwLZvBtxyYeL0S+Fbw4Fs+g28F8PF69eAb6sG3YgbfUPDxeg3ga/fgWymDrx18vF4j+Do8+IZl8HWAj9drAt8ID77hGXwjwMfr4WtHq3jwrZzBtwr4eL1m8K3mwbdqBt9q4OP1WsC3hgff6hl8a4CP12sF31pufR3Gt2YG31pgWdetZYSxrJ3Bsi5Y1nFrmeM9II7KjF+HXc9xmaaM9aFP1k6UH8Hy9aC/1nfcX/jeMy6X59Gn1r5tNZY1E058382aAnyct45HS5iwmKncsS7Nh2O5gVtf/H9hZAbfBmDZ2KllePxa6YYZLBuDZSOnlu7/C5u4LTM+hm8Kfm4r1xPBchzzTR23LYA6uVyeR59a1apWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqVa1qVata1apWtapVrWp1bzWWkQlnCM8bKcDHeRt5tIQJi5mCxHwnpNN8OJabu/XF76nZLINvc7Bs5dTSEb+nZosMlq3AsqVTS/d7arZ2W2b8npptwM9t5XoiWI5jvo3jtgVQJ5fL8+hTq1rVqla1qlWtalWrWtWqVrWqVa1qVata1arWSrEay2YJZwjP20yAj/O29GgJExYzlXudPc2HY7mdW198T2LbDL7twLKjW0v8/Q/bZ7DsCJYd3FriexI7uS2z3ZSxM/i5rVxPBMtxzHd23LYA6uRyeR59au3bVmPZNuEM4XnbCvBx3g4eLWHCYqZyx6U0H47lrm598TF8lww+/L7QPZxahsX3lXfLYNkDLLs7tXQfw/d0W2Z8DN8L/NxWrieC5TjmezluWwB1crk8jz61qlWtalWrWtWqVrX2baux7JJwhvC8XQT4OG93j5YwYTFTueuUNB+O5T5uffE13d4ZfPuAZT+nlu5rulEZLPuBZV+nlu5rutFuy4yv6caAn9vK9USwHMd8jOO2BVAnl8vz6FOrWtWqVrWqVa1qVWvfthrL3glnCM/bW4CP8/b1aAkTFjOVu05J8+FY7u/WF1/Tjc3g2x8sB3qwHJDBciBYxrm1xNd0B7ktM76mGw9+bivXE8FyHPPxjtsWQJ1cLs+jr1KsxjI24QzheWMF+DhvnEdLmLCYqdz+k+bDsZzo1hfv3xMy+CaC5RAPlkkZLIeA5WC3lvhYM9ltmfGxZgr4ua1cTwTLccynOG5bAHVyuTyPvkqxGsuEhDOE500Q4OO8gz1awoTFTOX2nzQfjuVUD76uDL6p4OtK8R3mwXdoBt9h4OP1QvAd7sE3LYPvcPDxevgbo0d68B2RwXck+I6ANPuO9uA7KoPvaDDxeiXwHevBd0wG37Hg4/XwN0aP9+A7LoPvePDxevgboyd68J2QwXci+Hi9RvCd7MF3UgbfyeDj9fD4d6oH3ykZfKeC75QU3+kefKdl8J0OvtNSfGd68J2RwXcm+M5I8Z3twXdWBt/Z4DsrxXeuB985GXznguU8t5b2CCznQT0XeGjz+VXz3mauP4L10HeRB9+FGXwXge/CFN8lHnwXZ/BdAj5eD7fpyzz4Ls3guwx8l6b4rvDguzyD7wrwXZ7iu8qD78oMvqvAd2WK7xoPvqsz+K4B39Upvp948F2bwfcT8F2b4vuZB99PM/h+Br6fpvh+4cH38wy+X4Dv5ym+X3nw/TKD71fg+2WK7zcefL/O4PsN+H6d4vudB99vM/h+B77fpvj+4MH3+wy+P4Dv9ym+P3nw/TGD70/g+2OK7y8efH/O4PsL+P6c4vubB99fM/j+Br6/pvj+4cH39wy+f4Dv7ym+f7r1xfcMrsvg+ydYbnBriT+X/q8MlhvAcr1bS3z/4ka3Zcb3L24CP7eV64lgOY75TY7bFkCdXC7Po0+tfdtqLNclnCE87zoBPs673qMlTFjMVO64lObDsbzFrS8+ht+cwXcLWG5zaun+vvN/Z7DcBpZbnVq6j+G3uy0zPobfAX5uK9cTwXIc8zscty2AOrlcnkefWtWqVrWqVa1qVata1apWtapVrWpVq1rVqla1VorVWG5OOEN43s0CfJx3q0dLmLCYKUjMd0I6zYdjeZdbX3xP4s4MvrvAcq9TS/c9ibszWO4Fyz1OLd33JO5zW2Z8T+J+8HNbuZ4IluOY3++4bQHUyeXyPPrUqla1qlWtalWrWtWqVrWqVa1qVata1apWtaq1UqzGcmfCGcLz7hTg47x7PFrChMVM5V5nT/PhWD7o1hffk3ggg+9BsDzi1NL9Ww8PZbA8ApaHnVq670k86rbM+J7EY+DntnI9ESzHMX/McdsCqJPL5Xn0qVWtalWrWtWqVrWqtW9bjeWBhDOE5z0gwMd5D3u0hAmLmcpdp6T5cCyfcOuLr+kez+B7AixPO7V0X9M9mcHyNFiecmrpvqZ7xm2Z7aaMZ8HPbeV6IliOY/6s47YFUCeXy/PoU6ta1apWtapVrWpVa9+2GsvjCWcIz3tcgI/znvJoCRMWM5W7Tknz4Vg+79YXX9M9l8H3PFhecmrpvqZ7IYPlJbC86NTSfU33stsy42u6V8DPbeV6IliOY/6K47YFUCeXy/PoU6ta1apWtapVrWpVa9+2GstzCWcIz3tOgI/zXvRoCRMWM5W7Tknz4Vi+6tYXX9NNz+B7FSxvuLXEvzPwWgbLG2B53a0lvqZ7022Z8TXdW+DntnI9ESzHMX/LcdsCqJPL5Xn0qbVvW41lesIZwvOmC/Bx3useLWHCYqZyx6U0H47lO2598TH87Qy+d8DyvltLfAx/N4PlfbC859YSH8M/cFtmfAz/EPzcVq4nguU45h86blsAdXK5PI8+tfZtq7G8nXCG8Ly3Bfg47z2PljBhMVO541KaD8fyY7e++Bj+UQbfx2D5zIPlkwyWz8DyqVtLfAz/3G2Z8TH8C/BzW7meCJbjmH/huG0B1Mnl8jz6KsVqLB8lnCE87yMBPs771KMlTFjMVG7/SfPhWH7lwfdlBt9X4Psyxfe1B9+MDL6vwTcjxfetB983GXzfgu+bFN9MD77vMvhmgu+7FN9/PPi+z+D7D/i+T/H914NvVgbff8E3K8UXBO59SVA5H9cfwRPRV+3W1xFB3dVQT85xP5Rrcw7bbKdGQZaSIEsoyFIUZMkJsrQIstQLstQJstQIsuQFWVoFWRoEWSJBllpBloIgS9DLlrBq7nO7EJZXw/OqE+uaftyw9MPyAq8D5RRtXi6l7AKUnbfpYjD3uthHBQ99hPV0wjzXVYeGoPctBUGWWkGWSJClQZClVZAlL8hSI8hSJ8hSL8jSIsiSE2QpCrKEgiwlQZZGQZbq+WTh8zguN5+w9Ga9NW7rje/z1UK9fF5bA/3O9deCo9Zx+3t6PTT00M84dUKa6+rp9dDetpQEWUJBlqIgS06QpUWQpV6QpU6QpUaQJS/Igv/zetvSKqhfGgRZIkGWWkGWgiBL0MuWnl6bDRPnlPjaLC9LvjYb2Xx8bbZk83IpZUdQdp1Nl4K518U+ijz0USlxbVNK+PC12VLQ+5aCIEutIEskyNIgyNIqyFII5FjygvqlRpClTpClXpClRZAlJ8hSFGQJBVlKgiyNgizV88nC55Rcbl3C0pv11rutN36duAHq5XPseuh3rh+fx+k8LK8HZ5OH/mmEbSSAOtiSg+dsWPOD79LaH1x1jl1SX99uFmTR19r1tfYsFkmvteOxV1/3/2FqEmTRexB6DyKLRe9BpFv6CbLo/RC9H5LFEvSy5X/dD6mD5/2v+yH8Hh28H5L2XnVevwbKnv1enmDudbGPajz0UU/v9cL3HM02BL1vKQiy1AqyRIIsDYIs/QRZWgVZCoEcS15Qv9QIstQJstQLsjQJsrQIskSC9umcoH4pCrKEgiwlQZZGQZZmQZbq+WTBzx10wnyNgHrzbuuN75/loF6+JsvjeYBN58Dh+HtxOsKEw0yJ2TmuWwOwOP4OnPh766oc97Mp0/F3Ha1mysDvOprdf/YRv9OI6y5CniNH9+sLiW2X59E3r1bc3nvD6mv8HX8XV4f5n1ULfcnlp/U9f/dWHvLz0M/feejnmcAJoI7voZ+/9VAv11Ow9bKD68rBcz63FznmnL6ne+E++ganTkhzXT3dC+9tS6MgS0mQJRRkKQqy5ARZZgmyRJ6PvVksLYL6pUmQpV6QpU6QpUaQJS/IUhC0T7cK6pd+giwNgiyRIEutIEtBkCXoZUtP9+V5+SzIq06sa/pxG7gvz9+1jffl+Tu3cyllfw15/N3XM1LWxT5y/X3iQaKeTpjnuvC+/AwBloIgS60gSyTI0iDI0k+QpVWQhc+nJFjygvqlRpClTpClXpClSZClRZAlErRPzxLULzlBlqIgSyjIUhJkaRRkaRZkqZ5PFvwNoU6Y/1pAvY5/cyp+jwD+5hRfH34F/c71fwkOx7/N1R4kHNOg3i+gXse/OTc8SJQ/DRyfQ77r388z9fLv8/E91E9T2vuJh3q5Hr6Hyg6uKwfPucReZJrzr+TnlV1/lsGUgZ8zn/1dSvDaa9Fxnfi5hCoYD5w6Ie3z/Unz4z1AtYn3AEWwvA7a5uM3FXr6rtm033fAe/R5DxacOiGdT7E0C7I0CrKUBFlCQZaiIEtOkAWPL71taRHUL02CLPWCLHWCLDWCLHlBloKgfbpVUL/0E2RpEGSJBFlqBVkKgixBL1t6ui+eT1wP4ucK5vhOX5vGz55Xp9TB50b4m258bOUyzLjsXpq7bOwjH9dKWE8nzM++VgNDtefrtnmxFARZagVZIkGWBkGWfoIsrYIss38LUoAlL6hfagRZ6gRZ6gVZmgRZWgRZ6gTt0zlB/VIUZAkFWUqCLI2CLM2CLNUpFkmfm3Z93aafm840Of/cNL52rp+b7nGa589Nm7pnuq07vtea9lnsmVCnz89EBza4Dvws9jce6uV6+H0E7OC6cvCcTew/WD5f5Xwz8bkavpY8w603fn/J11DnNDCkfe4B33Pj+L0uI0w9X1XNOZU7ruP7Qb50axnm4T018X79mWOnKeNT6BPuP7ZHsPwz6C8f79v5vGrOceJ59M2rdUYFWWeqdZ6tPb2XxfG+Vvb19M9TLM2CLI2CLCVBllCQpSjIkhNkmSHI0iTIUi/IUifIUiPIkhdkmSXI0irI0k+QpUGQJRJkqRVkKQiyBL1s6en9I7wcv1eBz9e/gjz+HMSXkFedUgefj3wKeXxs5TLMuOxXmrts7CMf1ydYTyfMc134/pFPBFgKgiy1giyRIEuDIEs/QZZWQZZZgix5QZYaQZY6QZZ6QZYmQZYZgiw5QZaiIEsoyFISZGkUZGkWZKlOsXzs1jICrymqwIRTJ6Q/BovrayVT5kduy4zv7X3ouExTxgfQJ9x/bI9g+YfQXx847q8A6uRyeR59au3bVlPv+07rHd4eJuo1U7njxvse+8CU+Z7bMuN9/F3wc1u5ngiW4/i+67htAdTJ5fI8+tSqVrWqVa1qVata1apWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqVa1qVat7q6n3Haf1dsTvucB6zVTuPRfveOwDU+bbbsuM33PxFvi5rVxPBMtxfN9y3LYA6uRyeR59alWrWtWqVrWqVa1qVata1apWtapVrWpVq1rVWilWU++bbuuNP1+M9Zqp3GvWb3rsA1PmG27LjF+zfh383FauJ4LlOL6vO25bAHVyuTyPPrX2baup9zWn9Q6L70thvWYqt4+/5rEPTJmvui0z3seng5/byvVEsBzHd7rjtgVQJ5fL8+hTq1rVqla1qlWtalVr37aael9xWm/3OT/Wa6Zy5/yveOwDU+bLbsuMz/lfAv+r9pHriWA5ju9LjtsWQJ1cLs+jT61qVata1apWtapVrX3baup90W298e87Y71mKnfO/6LHPjBlvuC2zPic/3nwc1u5ngiW4/g+77htAdTJ5fI8+irFaup9zm298baI9Zqp3Lb4nMc+MGU+67bMeFt8BvzcVq4nguU4vs84blsAdXK5PI++SrGGkFcNebw8B3lP23Qe8p6y6QLkPQlt4rwnbLoG8h636VrIe8ymWyHvUZvG32l6xKbx95wetumPIO8hm/4A8h606fcg7wGbfhfy7rfptyHvPpt+C/Lutek3IO8em34d8u626Vch7y6bng55d9r0y5B3h02/BHm32/QLkHebTT8Pebfa9IeQ929I8+MtNl0HeTfbdAR5N9l0CfJutOl6yLvBphsg73qbboS8f6X4eFt8FvJ4W8Rtl7fFpyGPt8WnII+3xSchj7fFJyCPt8XHIY/76DHI4z56FPK4jx6BPO6jhyGP++ghyOM+ehDyuI8egDz+jZX7IY9/S+k+yOPfbbgX8vh32u+BPN7P7oa8BWz6Lshb0KbvhLyFbPoOyFvYpm+HvP42fRvkDbDpWyFvEZvGbXOgTd8CeYva9M2QN8imb4K8wTZ9I+S12fQNkLeYTV8PeUNsmrdNs62YbYi3wU772P7jpvh/ZdFxmbhf8FTuXKAIjwXHFrM/8X4xpWvS5FH7j9luzKjRAbDyCWI10DCN/4p418V/Rbzr4r8iXh//7XA5tbDMw9CO8DC0Iyp0aPmxt4bWddOxbVxuPmEsgs1Vvfjfjadyw4+/Wuz6KGP6mP+72eHfefK4rjE4/oWEMW38zbJc4nn/z8ZtRKWOW7n9FsctD+5ku5zBm6Hialt53mJ50Ezj+PQssg01p1vm9MqcTpnTJ3O61Ay+s+2jOT0yp0Pm9Mec7pjTG3M6Y05fzOmKOT0xpyPm9MOcbpjTi7aq7tMHc7qwOMUSFEtSLEWxNMUyFMtSLEexPMUKFCtSDKVYyfQJxTCKDorhFCMoVqZYhWJVitUoVqdYg2JNirUo1qZYh2Jd27frUaxPMZJiA4oNKTai2JhiE4pNKTaj2JxiC4otKbai2JpiG4ptKbaj2J5iB4odKXai2JliF4pdKXaj2J1iD4o9Kfai2JtiH4pRFPtS7EcxmmIMxViK/SkOoBhHcSDFQRTjKSZQTKSYRHEwxSEUkymmUHRRTKU4lOIwimkUh1McQXEkxVEUR1McQ3EsxXEUx1OcQHEixUkUJ1OcQnEqxWkUp1OcQXEmxVlV3eN9DsW5FOdRnE9xAcWFFBdRXExxCcWlFJdRXE5xBcWVFFdRXE1xDcW1VXMfuMz0md1717Lz23fvZG1Txk/qamtvm0h/R40fP+mwMaOHtuGyKW0Tpk7papvSNWpyV9vYyZMmtA0biuVebP+r8anzyKmTJ4+Z2NU2edLUiaPjYseOmzhuygFjRuNaG4fuNP8HzOM30H0sAgA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJztnMFu2zAMht/F52IQJUqU8irDDsXWAQWKdlh7K/LuS1FbVh1VRBaFbAyf1gFU/OW3+0m0Xb0OD08/b1/unx6fh93r4Ibd99fh+c/t49v/nl9u/74MO3Mz3D3+Ovy7vxl+3z/cDTvY3xxVAboQxsrDzzHm6mRr5d4CTOXeBqY8EU3Fxvq51u9/3Ax4ldRekNqhz9Ro/BnUoUYdyLlxSKCU2uwp2LHWGlt8T0eV6ojT90wwf0vA2ic3uelKueO53BbMhGKtR4ab0nQFRhfmWlOr9XEKJBSXFABWahHSVIwWik/2tWqbTBqrnYnEVBPiWEzR5lp8Sy993fQC5PSCZdKz+Qpx5ZUH5tSrCYxsIAlNhjH0IZE3GtCjAXtEY6s0yUzniQwyinCJ8hFcikX6tbPaczKB6sx9Ufh+cwpUJ/CT4NFApkGDoYR/O0J1sj3xCLm4eoT6xHjaEXwOCQGJOQHoKeVyKq7nEag+410SKIHL5cmZJVB9KlMEqs8OekC2bmdFoLqgFYHOd3RnoPO92xmoh0u7AvVQb1cgeVMzQAqmDmYGIloCKZi6DaRg6iaQUzB1G0jB1G0gBVO3gRRM3QZSMHUbSMHUbSAFU7eBxE3tTdEiGhuXQOKm5oDETc0AobipOSBxU3NA4qbmgMRNzQGJm5oDEjc1ByRuag5I3tRoi/thuLwdg/KmZoDkTd0G8vKmZoDkTc0AyZuaAZI3NQMkb2oGSN7UDJC8qRkgBVPHeerA4gnTCKRg6jaQgqmbQEHB1G0gBVO3gRRM3QZSMHUbSMHUbSAFU7eBFEzdBpI3tS+eMfvglkDypmaA5E3dBiJ5UzNA8qZmgORNzQDJm5oBkjc1AyRvagZI3tQMkLipA8b8MkrwR484SdzU4TCZZaDy/cQRSNzUITg7A9HylEVxU5OJOSECXCYUxU1NEPJjcrKwvKUXxU1N1oUZ6Gg9FMVNTQ5yOeHRK19R3NSELj8vI2+WL8VFcVOTx/mUec+UB8xvmhZvX4Kr1jo7fdWD4Ipf35Nfd4zi08VVpCI+Z52YSpxBiEkFIKXcSVkDzMuxaPJsjlB8+H+EKD7PXjDEwxSQ1xTWFi/U1//IxUSXMzfpvBjFVwerjDHJr2lWGaP8SmyVMcqvH1cZo/yqd5Uxyq/VVxnjV+8wriTGr96SXEmMa+phFGPcupguMW5dTI8YwWxtTJ8ctz6mT45bI9Mnx62T6ZPjqloZZ/NHH2K0XI4O81M9g+asLRzMqnoZxRxX1cwo5riqbkYxx1W1M4o5rqqf0cvxk02gthxPzXFV/YxijqvqZxRzXFU/o5jj1s/0yXHrZ/rkuPUzfXLc+pk+OW79TJ8ct36mS47y2yZeMkdK833cSGdtqyq/feNpwfg4vTtM3jHBMLcGvtUXvz5NowIUGydjHlVd6rGjqgsbzH8s4MtRzrxvcfut+ts+7+H6YRdoS+Ogeq/OjqqeeMi7U1sorkMI7/vXfjKqfazDqGr3xo6qny5uVP10caOqp6sxar//BwdpE6M=",
      "",
      "eJzNlUEKgzAQRe+SdSiZmaiNVyldSGtBEC3VneTuVVC0GJqNyN9l4H94i5mXQdXto+irtulUPihzSVR+G1T3Lppp7vri06uchF2qVdk8p7cwea1eVV2Ok9f7NKe8hmXNigukJbFzWFyyyZK/65EnBePJwHiuYDwOjIcMGhChATEakKABWTQgNEsTmqYJzdOEJmpCMzWjmZrRTM1opmY0UzOaqfl0U1tDc9iy+QHaZ5kWCuYNvL3O8Kdb/Uj403+AA+ElqB422VKydr9rEtRDrBQ84VgpeGaxUvAUYqXgCv4pef8FAItB6Q==",
      "",
      "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",
      "",
      "",
      "eJztnd2O67YVhd9lroNA/JPIvErRi6BNgQBBUjS5C86716exZJ/x3trUN7TJcX3VU0ArXEMvktJHauvPt19++8ePf/z826+/v/3w51t4++Fvf779/u8ff/36/37/48f//PH2w/Td20+//vP0v1++e/vXz7/89PaD+/LdzVUuhnk+X3n6d87b1cVLlyfv3Hp58rNxeVmW9eLJp8u16cvfv3uLn9J1eqDrENPmOk7pA65nybWbXJkuGpd23fuY/Plin6Z4uTYskvkSNjslX1095a9+lsf7KWsC/JS+9XN7dfbrfzrP6b33PLj3pZwvLu6m38ujvfupxPXqU6AN7z5M29Vhdperv/4lN1envBqZrwaHfG10Zb04ejdfrk7S1b5MayeGKS/G1UtcTS/Zb9fGr/3tpmfq8NltHT5741q/TUfBX02Lbjo6dTn36sKPdqEfvQs39z6U+E23fLUv3t98Hvvijc7nsf/we4eD9uPl6pSsMVW2wVqeYn15+I3UKD9On4n04fd+d+3uOV9cFyvg85rY0wPUR/rQj35LVJZpG5vBGvfOb7fbLoTl/2v28aPfmg3yU3aZq/zoN333/HH6zGyj36ce6/GwDXwXinX1nFZUtTj/oU4c/m55+Mc9LzLKVxce6cLRH3o+QRcqjybztKH4Keew34V5DuufWa5nrDRL5DNN69U5uSu6Lk5vDfcEvPJYMMyf2m4jwSsE+Z5/aszbn7qU6z/15CcoTxP39BPSjh/llviefrY5Kc/Z7UehuLz+p0uYbswrt4yjmE/biC3J5/fmlbuvz2Feuev5HOaV+43PYV5Z6T+H+Q5rbDvzHVbNduY7rIPNzMcOi2Y784OvsPvmR19hU97ML+m9+dFX2F3zo6+wu+ZHX2F3zY++wu6aH32F3TU/+gq7a370FXbPfBp9hd01P/oKu2t+8BV23vbeyny13XA2P/gKu29+8BV23/zgK+y++cFX2H3zg6+w++YHX2H3zQ++wu6anwdfYffND77C7psfe4V10+S3jetpiu69/bHXWNP+2KusaX/sdda0P/ZKa9ofe6017Y+92pr2x15vLfvL2CuuaX/sNde0P/yqmy9HY6byHnwvw6+6+/aHX3X37Q+/6u7bH37V3bc//Kq7b3/4VXff/vCr7q79PPyqu29/+FV33/7oq667HNKe3NXhzrP90Vddw/7oq65h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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\n/// @notice This contract implements a private coin toss game between users.\n/// @dev The contract is deployed with a bet_amount and a private oracle.\n///      The user can create a bet note with a bet (true or false) which is later settled by the private oracle.\n///      The users that betted for the winner receive (in equal parts) the bets made by the users that lost.\ncontract CoinToss {\n\n    /////////////////////////////////////////////////////////////////////\n    //                             Imports                             //\n    /////////////////////////////////////////////////////////////////////\n\n    use crate::types::oracle::{\n        DivinityAddressSubmitQuestionStruct, \n        FromSubmitQuestionStruct, \n        PrivateOraclePrivateContextInterface, \n    };\n\n    use crate::types::{\n        bet_note::{BetNote, BetNoteMethods, BET_NOTE_LEN},\n        config_note::{ConfigNote, ConfigNoteMethods, CONFIG_NOTE_LEN},\n        round_data::{RoundData, RoundDataSerializationMethods, ROUND_DATA_SERIALIZED_LEN, Phase},\n        token::{\n            AccountsBroadcastEscrowNoteForStruct,\n            FromEscrowStruct,\n            FromTransferStruct, \n            OwnerEscrowStruct,\n            OwnerSettleEscrowStruct,\n            RecipientSettleEscrowStruct,\n            TokenPrivateContextInterface, \n            ToTransferStruct\n        }\n    };\n\n    use dep::aztec::{\n        context::Context,\n        types::type_serialization::{\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n        },\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            note_viewer_options::NoteViewerOptions,\n            utils as note_utils\n        },\n        oracle::{\n            get_public_key::get_public_key,\n            rand::rand\n        },\n        selector::compute_selector,\n        state_vars::{\n            immutable_singleton::ImmutableSingleton,\n            set::Set,\n            map::Map, \n            public_state::PublicState\n        },\n        types::address::AztecAddress,\n    };\n\n    use dep::std::option::Option;\n\n    /////////////////////////////////////////////////////////////////////\n    //                             Storage                             //\n    /////////////////////////////////////////////////////////////////////\n\n    global ROUND_ID_SLOT = 1;\n    global PHASE_LENGTH_SLOT = 2;\n    global BET_AMOUNT_SLOT = 3;\n    global ORACLE_ADDRESS_SLOT = 4;\n    global DIVINITY_ADDRESS_SLOT = 5;\n    global TOKEN_ADDRESS_SLOT = 6;\n    global RESULTS_SLOT = 7;\n    global ROUND_DATA_SLOT = 8;\n    global CONFIG_NOTE_SLOT = 9;\n    global BETS_SLOT = 10;\n\n    /// @member config The config note, containing the divinity address, the private oracle address, the token address and the bet amount\n    /// @member bets The set of bet notes (ie active bets)\n    struct Storage {\n        ////////////////////////////// public //////////////////////////\n        round_id: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        phase_length: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        bet_amount: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        oracle_address: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        divinity_address: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token_address: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        results: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n        rounds: Map<PublicState<RoundData, ROUND_DATA_SERIALIZED_LEN>>,\n\n        ///////////////////////////// private //////////////////////////\n        config: ImmutableSingleton<ConfigNote, CONFIG_NOTE_LEN>,\n        bets: Set<BetNote, BET_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                ////////////////////////////// public //////////////////////////\n                round_id: PublicState::new(context, ROUND_ID_SLOT, FieldSerializationMethods),\n                phase_length: PublicState::new(context, PHASE_LENGTH_SLOT, FieldSerializationMethods),\n                bet_amount: PublicState::new(context, BET_AMOUNT_SLOT, FieldSerializationMethods),\n                oracle_address: PublicState::new(context, ORACLE_ADDRESS_SLOT, AztecAddressSerializationMethods),\n                divinity_address: PublicState::new(context, DIVINITY_ADDRESS_SLOT, AztecAddressSerializationMethods),\n                token_address: PublicState::new(context, TOKEN_ADDRESS_SLOT, AztecAddressSerializationMethods),\n                results: Map::new(\n                    context,\n                    RESULTS_SLOT,\n                    |context, slot| {\n                        PublicState::new(\n                            context,\n                            slot,\n                            BoolSerializationMethods,\n                        )\n                    },\n                ),\n                 rounds: Map::new(\n                    context,\n                    ROUND_DATA_SLOT,\n                    |context, slot| {\n                        PublicState::new(\n                            context,\n                            slot,\n                            RoundDataSerializationMethods,\n                        )\n                    },\n                ),\n\n                ////////////////////////////// private //////////////////////////\n                config: ImmutableSingleton::new(\n                    context,\n                    CONFIG_NOTE_SLOT,\n                    ConfigNoteMethods,\n                ),\n                bets: Set::new(context, BETS_SLOT, BetNoteMethods),\n            }\n        }\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    //                           Constructor                           //\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice         Constructor for the contract, setting the config note\n    /// @custom:privacy private\n    /// @param          divinity The divinity address, invoked by the oracle\n    /// @param          private_oracle The private oracle contract address\n    /// @param          token The token used to bet\n    /// @param          bet_amount The bet amount\n    /// @param          phase_length The phase length\n    #[aztec(private)]\n    fn constructor(divinity: AztecAddress, private_oracle: AztecAddress, token: AztecAddress, bet_amount: Field, phase_length: Field) {\n        let mut config_note = ConfigNote::new(divinity, private_oracle, token, bet_amount);\n        storage.config.initialize(&mut config_note, Option::none(), false);\n\n        let selector = compute_selector(\"initialize(Field,Field,(Field),(Field),(Field))\");\n        context.call_public_function(context.this_address(), selector, [phase_length, bet_amount, private_oracle.address, divinity.address, token.address]);\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    //                   Public external functions                    //\n    /////////////////////////////////////////////////////////////////////\n\n    #[aztec(public)]\n    fn start_next_round() {\n        let timestamp = context.timestamp();\n        let phase_length = storage.phase_length.read();\n\n        let current_round_id = storage.round_id.read();\n        if(current_round_id != 0) {\n            let current_round_data = storage.rounds.at(storage.round_id.read()).read();\n            assert(current_round_data.phase >= Phase::REVEAL, \"Current round not finished\");\n        }\n        let next_round_id = current_round_id + 1;\n        storage.round_id.write(next_round_id);\n        storage.rounds.at(next_round_id).write(RoundData::new(Phase::BETTING, (timestamp + phase_length) as u120, 0, 0));\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    //                   Public internal functions                    //\n    /////////////////////////////////////////////////////////////////////\n\n    #[aztec(public)]\n    fn initialize(phase_length: Field, bet_amount: Field, oracle_address: AztecAddress, divinity_address: AztecAddress, token_address: AztecAddress) {\n        assert(context.msg_sender() == context.this_address());\n\n        storage.phase_length.write(phase_length);\n        storage.bet_amount.write(bet_amount);\n        storage.oracle_address.write(oracle_address);\n        storage.divinity_address.write(divinity_address);\n        storage.token_address.write(token_address);\n    }\n\n    #[aztec(public)]\n    internal fn end_bet_phase(round_id: Field) {\n        let timestamp = context.timestamp() as u120;\n        let phase_length = storage.phase_length.read() as u120;\n\n        // Check that the phase is BETTING \n        let current_round_id = storage.round_id.read();\n        assert(round_id == current_round_id, \"Round id mismatch\");\n\n        let current_round_data = storage.rounds.at(storage.round_id.read()).read();\n        assert(current_round_data.phase == Phase::BETTING, \"Not in bet phase\");\n\n        // Check that the timestamp is after the end of the bet phase\n        assert(timestamp >= current_round_data.current_phase_end, \"Bet phase not finished\");\n\n        // Set state to AWAITING_ANSWER and update the end phase timestamp\n        let new_round_data = RoundData::new(Phase::AWAITING_ANSWER, (timestamp + phase_length) as u120, 0, current_round_data.bettors);\n        storage.rounds.at(current_round_id).write(new_round_data);\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    //                   Private external functions                    //\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice         Calls the oracle to get the result of the bet round\n    /// @custom:privacy private\n    /// @param          round_id The id of the current round\n    #[aztec(private)]\n    fn roll(round_id: Field, oracle_nonce: Field) {\n        let sender = AztecAddress::new(context.msg_sender());\n        let config_note = storage.config.get_note();\n        let divinity = config_note.divinity;\n        let oracle = config_note.private_oracle;\n        let oracle_contract = PrivateOraclePrivateContextInterface::at(oracle.address);\n        let address_this = AztecAddress::new(context.this_address());\n\n        // Create the question in the oracle\n        let callback = [address_this.address, round_id, 0, 0, 0, 0];\n        let __ = oracle_contract.submit_question(\n            &mut context,\n            FromSubmitQuestionStruct { address: sender.address },\n            round_id,\n            DivinityAddressSubmitQuestionStruct { address: divinity.address },\n            oracle_nonce,\n            callback\n        );\n\n        // End the bet phase and update public state\n        // This checks that the round id is correct and that the phase is BETTING\n        let selector = compute_selector(\"end_bet_phase(Field)\");\n        context.call_public_function(context.this_address(), selector, [round_id]);\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    //                   Private internal functions                    //\n    /////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////////////////////////////////////////\n    //             Public unconstrained external functions             //\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice         Gets the config note\n    /// @custom:privacy unconstrained\n    /// @return         The config note (divinity, private oracle, token, bet_amount)\n    unconstrained fn get_config_unconstrained() -> ConfigNote {\n        storage.config.view_note()\n    }\n\n    /// @notice         Gets the bet notes for an user\n    /// @custom:privacy unconstrained\n    /// @param          start_offset The offset to start from\n    /// @return         The bet notes (padded with empty notes, up to 10)\n    unconstrained fn get_user_bets_unconstrained(start_offset: u32) -> [Option<BetNote>; 10] {\n        let user_bets_getter_option = NoteViewerOptions::new().set_offset(start_offset);\n        storage.bets.view_notes(user_bets_getter_option)\n    }\n\n    /// @notice         Compute the note hash and nullifier for a note\n    /// @custom:privacy unconstrained\n    /// @param          contract_address The contract address (this)\n    /// @param          nonce The nonce\n    /// @param          storage_slot The storage slot of the note\n    /// @param          preimage The preimage of the note\n    /// @return         The note hash and nullifier\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; CONFIG_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ConfigNoteMethods, note_header, preimage)\n    }\n\n    unconstrained fn get_phase_length_unconstrained() -> Field {\n        storage.phase_length.read()\n    }\n\n    unconstrained fn get_bet_amount_unconstrained() -> Field {\n        storage.bet_amount.read()\n    }\n\n    unconstrained fn get_oracle_address_unconstrained() -> AztecAddress {\n        storage.oracle_address.read()\n    }\n\n    unconstrained fn get_divinity_address_unconstrained() -> AztecAddress {\n        storage.divinity_address.read()\n    }\n\n    unconstrained fn get_token_address_unconstrained() -> AztecAddress {\n        storage.token_address.read()\n    }\n\n    unconstrained fn get_round_id() -> Field {\n        storage.round_id.read()\n    }\n\n    unconstrained fn get_round_data(round_id: Field) -> RoundData {\n        storage.rounds.at(round_id).read()\n    }\n}",
        "path": "/home/shaito/wonderland/aztec-coin-toss-pvp/src/main.nr"
      },
      "4": {
        "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
        "path": "std/hash.nr"
      },
      "33": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "75": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "92": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "95": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "107": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "108": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "110": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "114": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "116": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "117": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "127": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "130": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "131": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "133": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "134": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "137": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "138": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "139": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "140": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "141": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "145": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "148": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/aztec/types/type_serialization/field_serialization.nr"
      },
      "150": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "151": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
        "path": "/aztec/utils.nr"
      },
      "153": {
        "source": "/////////////////////////////////////////////////////////////////////\n//                             Imports                             //\n/////////////////////////////////////////////////////////////////////\n\nuse dep::aztec::{\n    context::PrivateContext,\n    log::emit_encrypted_log,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        get_public_key::get_public_key,\n        get_secret_key::get_secret_key,\n        notes::check_nullifier_exists,\n        notes::check_nullifier_exists_oracle,\n        rand::rand,\n    },\n    types::address::AztecAddress\n};\n\nuse dep::protocol_types::{\n    constants::EMPTY_NULLIFIED_COMMITMENT,\n};\n\nuse dep::std::option::Option;\n\n\n/////////////////////////////////////////////////////////////////////\n//                              Class                              //\n/////////////////////////////////////////////////////////////////////\n\n/// @notice A note that represents a given bet, of a given user\n/// @member owner The owner of the note\n/// @member bet_id The id of the bet (the escrow randomness is reused for this)\n/// @member bet The bet outcome given by the user (true or false)\n/// @member header The note header\nstruct BetNote {\n    owner: AztecAddress,\n    bet_id: Field,\n    bet: bool, // Heads is 0 (False). Tails is 1 (True).\n    escrow_randomness: Field,\n    header: NoteHeader\n}\n\nglobal BET_NOTE_LEN: Field = 4;\n\nimpl BetNote {\n    /////////////////////////////////////////////////////////////////////\n    //                         Public methods                          //\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice Bet note constructor\n    /// @param _context The currenct context, used to push the bet_id nullifier in order to ensure uniqueness\n    /// @param _owner The owner of the note\n    /// @param _bet_id The id of the bet (randomly generated, by reusing the escrow randomness)\n    /// @param _bet The bet outcome given by the user (true or false, representing head or tail)\n    pub fn new(_context: &mut PrivateContext, _owner: AztecAddress, _bet: bool, _bet_id: Field, _escrow_randomness: Field) -> Self {\n        // Nullify bet id\n        let compute_initialization_nullifier = BetNote::generate_bet_id_nullifier;\n        let nullifier = compute_initialization_nullifier(_bet_id);\n        _context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        BetNote {\n            owner: _owner,\n            bet_id: _bet_id,\n            bet: _bet,\n            escrow_randomness: _escrow_randomness,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    /// @notice Bet note bet_id nullifying generator\n    /// @param _bet_id The id of the bet to nullify\n    pub fn generate_bet_id_nullifier(_bet_id: Field) -> Field {\n        dep::std::hash::pedersen_hash([_bet_id])\n    }\n\n    /// @notice Bet note bet_id initialization checker. Checks whether the bet_id was added to the nullifying tree\n    /// @param _bet_id The id of the bet to check for nullification status\n    unconstrained pub fn is_id_nullified(_bet_id: Field) -> bool {\n        let compute_initialization_nullifier = BetNote::generate_bet_id_nullifier;\n        let nullifier = compute_initialization_nullifier(_bet_id);\n        check_nullifier_exists(nullifier)\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    //                        Internal methods                         //\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice Serializes the note\n    fn serialize(self) -> [Field; BET_NOTE_LEN] {\n        [self.owner.address, self.bet_id, self.bet as Field, self.escrow_randomness]\n    }\n\n    /// @notice Deserializes the note\n    fn deserialize(preimage: [Field; BET_NOTE_LEN]) -> Self {\n        BetNote {\n            owner: AztecAddress::new(preimage[0]),\n            bet_id: preimage[1],\n            bet: preimage[2] as bool,\n            escrow_randomness: preimage[3],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    /// @notice Computes the note hash of the note\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.bet_id,\n            self.bet as Field,\n            self.escrow_randomness\n        ])\n    }\n\n    /// @notice Computes the nullifier of the note\n    /// @dev    This is a pretty standard nullifier computation, using the bet_id as the key\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(BetNoteMethods, self);\n        let nullifier_key = self.bet_id;\n\n        dep::std::hash::pedersen_hash([\n            note_hash_for_nullify,\n            nullifier_key,\n        ])\n    }\n\n    /// @notice Sets the note header\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    /// @notice Emit the note creation event using the owner public key\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\n/////////////////////////////////////////////////////////////////////\n//                         Global methods                          //\n/////////////////////////////////////////////////////////////////////\n\nfn deserialize(preimage: [Field; BET_NOTE_LEN]) -> BetNote {\n    BetNote::deserialize(preimage)\n}\n\nfn serialize(note: BetNote) -> [Field; BET_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/shaito/wonderland/aztec-coin-toss-pvp/src/types/bet_note.nr"
      },
      "154": {
        "source": "/////////////////////////////////////////////////////////////////////\n//                             Imports                             //\n/////////////////////////////////////////////////////////////////////\n\nuse dep::aztec::{\n    context::PrivateContext,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    types::address::AztecAddress\n};\n\n/////////////////////////////////////////////////////////////////////\n//                              Class                              //\n/////////////////////////////////////////////////////////////////////\n\n/// @notice a note containing the (immutable) game configuration\n/// @member divinity the address of the divinity used by the oracle\n/// @member private_oracle the address of the private oracle contract\n/// @member token the address of the token used for betting\n/// @member bet_amount the amount of tokens to bet\n/// @member header the note header\nstruct ConfigNote {\n    divinity: AztecAddress,\n    private_oracle: AztecAddress,\n    token: AztecAddress,\n    bet_amount: Field,\n    header: NoteHeader\n}\n\nglobal CONFIG_NOTE_LEN: Field = 4;\n\nimpl ConfigNote {\n    \n    /////////////////////////////////////////////////////////////////////\n    //                         Public methods                          //\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice create a new config note\n    /// @param _divinity the address of the divinity used by the oracle\n    /// @param _private_oracle the address of the private oracle contract\n    /// @param _token the address of the token used for betting\n    /// @param _amount the amount of tokens to bet\n    pub fn new(_divinity: AztecAddress, _private_oracle: AztecAddress, _token: AztecAddress, _amount: Field) -> Self {\n        ConfigNote {\n            divinity: _divinity,\n            private_oracle: _private_oracle,\n            token: _token,\n            bet_amount: _amount,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    //                        Internal methods                         //\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice serialize the note\n    fn serialize(self) -> [Field; CONFIG_NOTE_LEN] {\n        [self.divinity.address, self.private_oracle.address, self.token.address, self.bet_amount]\n    }\n\n    /// @notice deserialize the note\n    fn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> Self {\n        ConfigNote {\n            divinity: AztecAddress::new(preimage[0]),\n            private_oracle: AztecAddress::new(preimage[1]),\n            token: AztecAddress::new(preimage[2]),\n            bet_amount: preimage[3],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    /// @notice compute the note hash\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.divinity.address,\n            self.private_oracle.address,\n            self.token.address,\n            self.bet_amount\n        ])\n    }\n\n    /// @notice this note isn't nullifiable, returns 0\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    /// @notice get the note header\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    /// @notice this notes isn't private, no owner to emit to\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////\n//                         Global methods                          //\n/////////////////////////////////////////////////////////////////////\n\nfn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> ConfigNote {\n    ConfigNote::deserialize(preimage)\n}\n\nfn serialize(note: ConfigNote) -> [Field; CONFIG_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ConfigNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ConfigNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ConfigNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ConfigNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ConfigNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ConfigNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/shaito/wonderland/aztec-coin-toss-pvp/src/types/config_note.nr"
      },
      "156": {
        "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\nstruct RequesterSubmitAnswerStruct {\n  address: Field,\n}\n\nstruct FromSubmitQuestionStruct {\n  address: Field,\n}\n\nstruct DivinityAddressSubmitQuestionStruct {\n  address: Field,\n}\n\n\n// Interface for calling PrivateOracle functions from a private context\nstruct PrivateOraclePrivateContextInterface {\n  address: Field,\n}\n\nimpl PrivateOraclePrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn cancel_question(\n    self,\n    context: &mut PrivateContext,\n    question: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = question;\n\n    context.call_private_function(self.address, 0x7d126cd4, serialized_args)\n  }\n  \n\n  pub fn consult_answer(\n    self,\n    context: &mut PrivateContext,\n    question: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = question;\n\n    context.call_private_function(self.address, 0x907da598, serialized_args)\n  }\n  \n\n  pub fn get_fee(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0x64af47cf, serialized_args)\n  }\n  \n\n  pub fn initialize_payment_token(\n    self,\n    context: &mut PrivateContext,\n    payment_token: Field,\n    fee: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = payment_token;\n    serialized_args[1] = fee;\n\n    context.call_public_function(self.address, 0x233e29de, serialized_args)\n  }\n  \n\n  pub fn submit_answer(\n    self,\n    context: &mut PrivateContext,\n    question: Field,\n    requester: RequesterSubmitAnswerStruct,\n    answer: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = question;\n    serialized_args[1] = requester.address;\n    serialized_args[2] = answer;\n\n    context.call_private_function(self.address, 0xdc92d6e8, serialized_args)\n  }\n  \n\n  pub fn submit_question(\n    self,\n    context: &mut PrivateContext,\n    from: FromSubmitQuestionStruct,\n    question: Field,\n    divinity_address: DivinityAddressSubmitQuestionStruct,\n    nonce: Field,\n    callback: [Field;6]\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 10];\n    serialized_args[0] = from.address;\n    serialized_args[1] = question;\n    serialized_args[2] = divinity_address.address;\n    serialized_args[3] = nonce;\n    serialized_args[4] = callback[0];\n    serialized_args[5] = callback[1];\n    serialized_args[6] = callback[2];\n    serialized_args[7] = callback[3];\n    serialized_args[8] = callback[4];\n    serialized_args[9] = callback[5];\n\n    context.call_private_function(self.address, 0xb9d88bb1, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling PrivateOracle functions from a public context\nstruct PrivateOraclePublicContextInterface {\n  address: Field,\n}\n\nimpl PrivateOraclePublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn initialize_payment_token(\n    self,\n    context: PublicContext,\n    payment_token: Field,\n    fee: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = payment_token;\n    serialized_args[1] = fee;\n\n    context.call_public_function(self.address, 0x233e29de, serialized_args)\n  }\n  \n}\n  \n  \n",
        "path": "/home/shaito/wonderland/aztec-coin-toss-pvp/src/types/oracle.nr"
      },
      "157": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nmod Phase {\n    global BETTING: u120 = 1;\n    global AWAITING_ANSWER: u120 = 2;\n    global REVEAL: u120 = 3;\n    global CLAIM: u120 = 4;\n}\n\nstruct RoundData {\n    phase: u120, \n    current_phase_end: u120, \n    reveals_count: u120,\n    bettors: u120\n}\n\nimpl RoundData {\n    pub fn new(\n        _phase: u120,\n        _current_phase_end: u120,\n        _reveals_count: u120,\n        _bettors: u120\n    ) -> Self {\n        Self {\n            phase: _phase,\n            current_phase_end: _current_phase_end,\n            reveals_count: _reveals_count,\n            bettors: _bettors\n        }\n    }\n}\n\nglobal ROUND_DATA_SERIALIZED_LEN: Field = 4;\n\nfn deserializeRoundData(fields: [Field; ROUND_DATA_SERIALIZED_LEN]) -> RoundData {\n    RoundData{phase: fields[0] as u120, current_phase_end: fields[1] as u120, reveals_count: fields[2] as u120, bettors: fields[3] as u120}\n}\n\nfn serializeRoundData(value: RoundData) -> [Field; ROUND_DATA_SERIALIZED_LEN] {\n    [value.phase as Field, value.current_phase_end as Field, value.reveals_count as Field, value.bettors as Field]\n}\n\nglobal RoundDataSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeRoundData,\n    serialize: serializeRoundData,\n};",
        "path": "/home/shaito/wonderland/aztec-coin-toss-pvp/src/types/round_data.nr"
      }
    }
  }
}