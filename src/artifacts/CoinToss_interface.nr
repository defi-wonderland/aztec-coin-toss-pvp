/* Autogenerated file, do not edit! */
  
use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::protocol_types::constants::RETURN_VALUES_LENGTH;

struct DivinityAddressOracleCallbackStruct {
  address: Field,
}

struct EncryptedTailSumRollStruct {
  C1: C1EncryptedTailSumRollStruct,
  C2: C2EncryptedTailSumRollStruct,
}

struct C1EncryptedTailSumRollStruct {
  point: PointC1EncryptedTailSumRollStruct,
}

struct PointC1EncryptedTailSumRollStruct {
  x: Field,
  y: Field,
}

struct C2EncryptedTailSumRollStruct {
  point: PointC2EncryptedTailSumRollStruct,
}

struct PointC2EncryptedTailSumRollStruct {
  x: Field,
  y: Field,
}


// Interface for calling CoinToss functions from a private context
struct CoinTossPrivateContextInterface {
  address: Field,
}

impl CoinTossPrivateContextInterface {
  pub fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  pub fn bet(
    self,
    context: &mut PrivateContext,
    bet: bool,
    round_id: Field,
    bet_randomness: Field,
    unshield_nonce: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 4];
    serialized_args[0] = bet as Field;
    serialized_args[1] = round_id;
    serialized_args[2] = bet_randomness;
    serialized_args[3] = unshield_nonce;

    context.call_private_function(self.address, 0x5aeafc41, serialized_args)
  }
  

  pub fn claim(
    self,
    context: &mut PrivateContext,
    round_id: Field,
    amount: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 2];
    serialized_args[0] = round_id;
    serialized_args[1] = amount;

    context.call_private_function(self.address, 0xe642f6a0, serialized_args)
  }
  

  pub fn end_reveal_phase(
    self,
    context: &mut PrivateContext
  ) {
    let mut serialized_args = [0; 0];

    context.call_public_function(self.address, 0x0b2d8f06, serialized_args)
  }
  

  pub fn oracle_callback(
    self,
    context: &mut PrivateContext,
    answer: [Field;3],
    data: [Field;5],
    divinity_address: DivinityAddressOracleCallbackStruct
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 9];
    serialized_args[0] = answer[0];
    serialized_args[1] = answer[1];
    serialized_args[2] = answer[2];
    serialized_args[3] = data[0];
    serialized_args[4] = data[1];
    serialized_args[5] = data[2];
    serialized_args[6] = data[3];
    serialized_args[7] = data[4];
    serialized_args[8] = divinity_address.address;

    context.call_private_function(self.address, 0x3d2d23ee, serialized_args)
  }
  

  pub fn reveal(
    self,
    context: &mut PrivateContext,
    round_id: Field,
    user_randomness: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 2];
    serialized_args[0] = round_id;
    serialized_args[1] = user_randomness;

    context.call_private_function(self.address, 0xb8886ebe, serialized_args)
  }
  

  pub fn roll(
    self,
    context: &mut PrivateContext,
    round_id: Field,
    oracle_nonce: Field,
    encrypted_tail_sum: EncryptedTailSumRollStruct
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 6];
    serialized_args[0] = round_id;
    serialized_args[1] = oracle_nonce;
    serialized_args[2] = encrypted_tail_sum.C1.point.x;
    serialized_args[3] = encrypted_tail_sum.C1.point.y;
    serialized_args[4] = encrypted_tail_sum.C2.point.x;
    serialized_args[5] = encrypted_tail_sum.C2.point.y;

    context.call_private_function(self.address, 0x40008142, serialized_args)
  }
  

  pub fn start_next_round(
    self,
    context: &mut PrivateContext
  ) {
    let mut serialized_args = [0; 0];

    context.call_public_function(self.address, 0xaaa007bc, serialized_args)
  }
  
}
  
  


// Interface for calling CoinToss functions from a public context
struct CoinTossPublicContextInterface {
  address: Field,
}

impl CoinTossPublicContextInterface {
  pub fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  pub fn end_reveal_phase(
    self,
    context: PublicContext
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 0];

    context.call_public_function(self.address, 0x0b2d8f06, serialized_args)
  }
  

  pub fn start_next_round(
    self,
    context: PublicContext
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 0];

    context.call_public_function(self.address, 0xaaa007bc, serialized_args)
  }
  
}
  
  
