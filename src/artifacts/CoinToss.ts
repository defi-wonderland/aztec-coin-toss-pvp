
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import CoinTossContractArtifactJson from './CoinToss.json' assert { type: 'json' };
export const CoinTossContractArtifact = CoinTossContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract CoinToss;
 */
export class CoinTossContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, CoinTossContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, CoinTossContract.artifact, wallet) as Promise<CoinTossContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, divinity: AztecAddressLike, private_oracle: AztecAddressLike, token: AztecAddressLike, bet_amount: FieldLike, phase_length: FieldLike) {
    return new DeployMethod<CoinTossContract>(Point.ZERO, wallet, CoinTossContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, divinity: AztecAddressLike, private_oracle: AztecAddressLike, token: AztecAddressLike, bet_amount: FieldLike, phase_length: FieldLike) {
    return new DeployMethod<CoinTossContract>(publicKey, wallet, CoinTossContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return CoinTossContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _increase_bettors(round_id: field) */
    _increase_bettors: ((round_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _increase_reveals(round_id: field, user_bet: field) */
    _increase_reveals: ((round_id: FieldLike, user_bet: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _set_result(caller: field, round_id: field, answer: field) */
    _set_result: ((caller: FieldLike, round_id: FieldLike, answer: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** bet(bet: boolean, round_id: field, bet_randomness: field, unshield_nonce: field) */
    bet: ((bet: boolean, round_id: FieldLike, bet_randomness: FieldLike, unshield_nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, preimage: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** end_bet_phase(round_id: field) */
    end_bet_phase: ((round_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** end_reveal_phase() */
    end_reveal_phase: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_bet_amount_unconstrained() */
    get_bet_amount_unconstrained: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_config_unconstrained() */
    get_config_unconstrained: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_divinity_address_unconstrained() */
    get_divinity_address_unconstrained: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_oracle_address_unconstrained() */
    get_oracle_address_unconstrained: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_phase_length_unconstrained() */
    get_phase_length_unconstrained: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_result(round_id: field) */
    get_result: ((round_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_reveal_notes_unconstrained(start_offset: integer) */
    get_reveal_notes_unconstrained: ((start_offset: (bigint | number)) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_round_data(round_id: field) */
    get_round_data: ((round_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_round_id() */
    get_round_id: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_token_address_unconstrained() */
    get_token_address_unconstrained: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_user_bets_unconstrained(start_offset: integer) */
    get_user_bets_unconstrained: ((start_offset: (bigint | number)) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** initialize(phase_length: field, bet_amount: field, oracle_address: struct, divinity_address: struct, token_address: struct) */
    initialize: ((phase_length: FieldLike, bet_amount: FieldLike, oracle_address: AztecAddressLike, divinity_address: AztecAddressLike, token_address: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_round_randomness_nullified(round_id: field, randomness: field) */
    is_round_randomness_nullified: ((round_id: FieldLike, randomness: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** oracle_callback(answer: field, data: array) */
    oracle_callback: ((answer: FieldLike, data: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** reveal(round_id: field, user_randomness: field) */
    reveal: ((round_id: FieldLike, user_randomness: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** roll(round_id: field, oracle_nonce: field) */
    roll: ((round_id: FieldLike, oracle_nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** start_next_round() */
    start_next_round: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
